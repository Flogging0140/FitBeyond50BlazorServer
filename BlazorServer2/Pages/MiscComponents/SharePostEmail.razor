@using BlazorServer2.Models.DTOs;
@inject BrevoEmailApiHelper _emailSender

<div class="w-100">
    <div class="align-self-start p-1 m-1">
        <button style="width:55px;background:none;border:none;" class="text-center" @onclick="()=>ToggleSubscribeShow()">
            <img style="display:block;width:35px;" src="https://em-content.zobj.net/thumbs/120/google/350/incoming-envelope_1f4e8.png" />
        </button>
    </div>

    <div class="text-center align-self-center" hidden="@(!HideLabel)">
        <EditForm Model="EmailAddressDTO" OnValidSubmit="()=>Send(EmailAddressDTO.EmailAddress)">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <InputText id="emailSend" class="w-100 form-control m-2 rounded-4" placeholder="Email Address" @bind-Value=EmailAddressDTO.EmailAddress />
            <button class="btn btn-primary w-100 m-2" type="submit">Email This Post!</button>
        </EditForm>
    </div>

</div>

@* inform user of if sent successfully *@
<StatusModal @ref="Modal" />

@code {
    [Parameter]
    public string HtmlContent { get; set; } = default!;

    [Parameter]
    public string HeaderSubject { get; set; } = default!;

    public EmailSubscribeDTO EmailAddressDTO { get; set; } = new() { EmailAddress = string.Empty };

    // for status referencing, calling directly
    public StatusModal? Modal { get; set; } = default!;

    public bool HideLabel { get; set; }

    public async Task Send(string toAddress)
    {
        try
        {
            // just to silence underline
            if (Modal is null)
                throw new Exception("Modal null");

            // toggle, open modal
            await Modal.ToggleModalShow("📫 Sent!", true);

            await _emailSender.SendEmailAsync(toAddress, HeaderSubject, HtmlContent, BrevoEmailApiHelper.EmailType.sharePost);

            // toggle, close modal
            await Modal.ToggleModalShow(string.Empty, true);
        }
        catch (Exception ex)
        {
            // toggle, close modal
            // this is altnernative to get result real time, wait for exception, obviously false
            await Modal.ToggleModalShow(string.Empty, false);

            // just ignore in case some issue where they give bad email
            throw new Exception(ex.Message);
        }
    }

    public void ToggleSubscribeShow()
        => HideLabel = !HideLabel;
}
