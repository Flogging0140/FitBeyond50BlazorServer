@using BlazorServer2.Data;
@using BlazorServer2.Models;
@using BlazorServer2.Models.DTOs;
@using Microsoft.AspNetCore.Identity.UI.Services;
@inject ApplicationDbContext _context
@inject IEmailSender _emailSender

@* our BS jumbotron, TODO: modify later*@
<div class="concontainer-fluid d-flex justify-content-center w-100 m-4 text-center">
    <div class="p-5 m-5 w-100 body-bg-custom custom-boarder">
        <div class="d-flex justify-content-center row w-100 border-bottom">
            <div class="col-sm-12 w-100 p-2">
                <small>
                    Author: @BlogPostDemo.PostAuthor Written: @BlogPostDemo.DateCreated.Date
                </small>
            </div>
        </div>
        <div class="d-flex justify-content-center row w-100 mt-2 mb-2">
            <div class="col-sm-12 w-100 p-2 m-2">
                <h2>@BlogPostDemo.PostTitle</h2>
                <p>
                    @((MarkupString)BlogPostDemo.PostHtmlContent)
                </p>
                @*<button class="btn btn-outline-secondary" type="button">Expand Article</button>*@
                @* ^^^ use JS to measure, then have smooth expand thing, or maybe css? *@
            </div>
        </div>
        <div class="d-flex justify-content-center row w-100 mt-2 mb-2 border-top">
            <div class="col-sm-12 w-100 p-2 m-2">
                <h4>Email list</h4>
                <div hidden="@(!HideLabel)">
                    <EditForm Model="EmailAddressDTO" OnValidSubmit="()=>Send(EmailAddressDTO.EmailAddress)">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <InputText id="emailSend" class="form-control m-2 rounded-4" placeholder="Title" @bind-Value=EmailAddressDTO.EmailAddress />
                        <button class="btn btn-outline-secondary" type="button">Email This Post!</button>
                    </EditForm>
                </div>
                <button @onclick="()=>ToggleSubscribeShow()">📨</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public BlogPost BlogPostDemo { get; set; } = default!;
    //public string SubscriberEmailAddress { get; set; } = "paulson.hanel@mymhc.ca";
    public EmailSubscribeDTO EmailAddressDTO { get; set; } = new() { EmailAddress = string.Empty };
    public bool HideLabel { get; set; }

    public async Task Send(string toAddress)
    {
        var subject = "Fit Beyond 50, Subscribed!";
        await _emailSender.SendEmailAsync(toAddress, subject, string.Empty);
    }

    public void ToggleSubscribeShow()
        => HideLabel = !HideLabel;
}
