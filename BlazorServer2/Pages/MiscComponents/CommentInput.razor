@using BlazorServer2.Data;
@using BlazorServer2.Models.DTOs;
@using BlazorServer2.Models;
@inject ApplicationDbContext _context
@inject AuthenticationStateProvider _authenticationStateProvider
@attribute [Authorize(Roles = "Author, RegularUser")]

@* shows edit form to create comment *@
<div class="w-100 text-center p-2 m-2">
    <div hidden="@(!HideLabel)">
        <EditForm Model="@CommentToAdd" OnValidSubmit="()=>AddComment()">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <InputText id="emailSend" class="w-100 form-control m-2 rounded-4" placeholder="Comment Here" @bind-Value=CommentToAdd.Text />
            <button class="btn btn-primary w-100 m-2" type="submit">Add Comment!</button>
        </EditForm>
    </div>
    <button class="btn btn-primary w-100 mt-2" style="width:55px;" @onclick="()=>ToggleSubscribeShow()">
        Comment Input
    </button>
</div>

@* inform user of if sent successfully *@
<StatusModal @ref="Modal" />

@code {

    [Parameter]
    public BlogPost BlogPostBeingAdded { get; set; } = default!;

    // for the method call in parent component
    [Parameter]
    public EventCallback<Comment> AddCommentCallback { get; set; }

    public Comment CommentToAdd { get; set; } = new();

    // for status referencing, calling directly
    public StatusModal? Modal { get; set; } = default!;

    public bool HideLabel { get; set; }

    // populate some values on component start
    protected override Task OnInitializedAsync()
    {
        // add email to comment
        var res = (_authenticationStateProvider.GetAuthenticationStateAsync().Result).User;
        CommentToAdd.email = res.Identity?.Name ?? "Anonymous";

        return base.OnInitializedAsync();
    }

    public async Task AddComment()
    {
        try
        {
            // just to silence underline
            if (Modal is null)
                throw new Exception("Modal null");

            // check for bad words, emogjis
            if (BadWordsHelper.ContainsObscenities(CommentToAdd.Text.Split(' ')))
                throw new Exception("Bad words detected");

            // get commenters id for obj
            var user = _context.Users.Where(u => u.UserName == CommentToAdd.email).FirstOrDefault();
            if (user == null)
                throw new Exception("User not found");

            // add user id, blog id for relations
            CommentToAdd.UserId = user.Id;
            CommentToAdd.BlogPostId = BlogPostBeingAdded.Id;

            // add comment to component and db, refresh
            await AddCommentCallback.InvokeAsync(CommentToAdd);

            // toggle, opem modal
            await Modal.ToggleModalShow("Added comment", true);

            // toggle, close modal
            await Modal.ToggleModalShow(string.Empty, true);

            // reset obj or tries insert duplcate, add logged in users email
            CommentToAdd = new()
            {
                email = (_authenticationStateProvider.GetAuthenticationStateAsync().Result).User.Identity.Name ?? "Anonymous"
            };
        }
        catch (Exception ex)
        {
            // just to silence underline
            if (Modal is null)
                throw new Exception("Modal null");

            // toggle, open modal, show error
            await Modal.ToggleModalShow(ex.Message, false);

            // toggle, close modal
            await Modal.ToggleModalShow(string.Empty, false);

            // just ignore in case some issue where they give bad email
            throw new Exception(ex.Message);
        }
    }

    // hide and show div on btn click
    public void ToggleSubscribeShow()
        => HideLabel = !HideLabel;
}
