@page "/ManagePosts"
@using BlazorServer2.Data;
@using BlazorServer2.Models;
@using BlazorServer2.Pages.MiscComponents;
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Author")]
@inject ApplicationDbContext _context


@*
    /*
    I would like to have 2 sections

    1)
        create post,
        see real time what it will look like,
        have iframe with that html thing?


    2)
        List posts, offer delete (edit later)


    Extras:
        Module for green checkmark on submit success,


    */
*@













<br />

<EditPost PostInProgress="PostInProgress" AddPostCallback="AddPost" RefreshPostsCall="LoadPosts" />

<br />

<EditPosts BlogPosts="BlogPosts" DeletePostCallback="RemovePost" />





@code {
    [Parameter]
    public BlogPost PostInProgress { get; set; } = new();

    public List<BlogPost> BlogPosts { get; set; } = default!;

    public ElementReference _element { get; set; }

    //public EventCallback RefreshPostsCall { get; set; }

    protected override Task OnInitializedAsync()
    {
        // get posts from db
        BlogPosts = _context.BlogPosts.ToList();

        return base.OnInitializedAsync();
    }

    private async Task AddPost()
    {
        try
        {
            // add to db
            //_context.BlogPosts.Add(PostInProgress);
            //await _context.SaveChangesAsync();

            // reset the post stuff
            //PostInProgress.PostTitle = default!;
            //PostInProgress.PostHtmlContent = default!;
        }
        catch
        {
        }
    }

    private void LoadPosts()
    {
        BlogPosts = _context.BlogPosts.ToList();
        StateHasChanged();
    }

    private void RemovePost(int blogPostId)
    {
        BlogPost? blogPostToDelete = _context.BlogPosts.ToList().Where(b => b.Id == blogPostId).FirstOrDefault();

        // skip if we can't find
        if (blogPostToDelete == null)
            return;

        // remove
        BlogPosts.Remove(blogPostToDelete);
        _context.BlogPosts.Remove(blogPostToDelete);
        _context.SaveChanges();
        StateHasChanged();

        // clear whatever 
        PostInProgress = new();
    }
}
