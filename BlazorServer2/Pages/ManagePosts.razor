@page "/ManagePosts"
@using BlazorServer2.Data;
@using BlazorServer2.Models;
@using BlazorServer2.Pages.MiscComponents;
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Author")]
@inject ApplicationDbContext _context
@inject BrevoEmailApiHelper _email

@*
    /*
    I would like to have 2 sections

    1)
        create post,
        see real time what it will look like,
        have iframe with that html thing?


    2)
        List posts, offer delete (edit later)


    Extras:
        Module for green checkmark on submit success,


    */
*@

<br />

<EditPost PostInProgress="PostInProgress" AddPostCallback="AddPostNotifySubscribers" RefreshPostsCall="LoadPosts" />

<br />

<SubscriberManager NotifySubscribers="SetNotifySubscribers" />

<br />

<EditPosts BlogPosts="BlogPosts" DeletePostCallback="RemovePost" />

<br />

<CommentsManagement DeleteCommentCallback="@RemoveComment" />

@code {
    [Parameter]
    public BlogPost PostInProgress { get; set; } = new();

    public List<BlogPost> BlogPosts { get; set; } = default!;

    public ElementReference _element { get; set; }

    // to let people know of new post.
    public bool NotifySubscribers { get; set; } = false;
    public List<Subscriber> Subscribers { get; set; } = default!;

    //public EventCallback RefreshPostsCall { get; set; }

    protected override Task OnInitializedAsync()
    {
        // get posts from db
        BlogPosts = _context.BlogPosts.ToList();

        // get subscribers
        Subscribers = _context.Subscribers.ToList();

        return base.OnInitializedAsync();
    }

    private void SetNotifySubscribers(bool notify)
        => NotifySubscribers = notify;

    // doing here bc looks better when checking nofity subs
    private async Task AddPostNotifySubscribers()
    {
        try
        {
            // add to db
            _context.BlogPosts.Add(PostInProgress);
            await _context.SaveChangesAsync();

            // notify subscribers
            if (NotifySubscribers == true)
            {
                // get all subscribers
                List<Subscriber> subscribersToNotify = _context.Subscribers.Where(s => s.HasUnsubscribed == false).ToList();

                if (subscribersToNotify.Count > 0)
                {
                    // send email to each
                    foreach (Subscriber subscriber in subscribersToNotify)
                    {
                        try
                        {
                            await _email.SendEmailAsync(subscriber.Email, "Post Notification", string.Empty, BrevoEmailApiHelper.EmailType.postNotification);
                        }
                        catch
                        {
                            // TODO: log error
                        }
                    }
                }
            }
        }
        catch
        {
        }
    }

    private void LoadPosts()
    {
        BlogPosts = _context.BlogPosts.ToList();
        StateHasChanged();
    }

    private void RemovePost(BlogPost blogPost)
    {
        //BlogPost? blogPostToDelete = _context.BlogPosts.ToList().Where(b => b.Id == blogPostId).FirstOrDefault();

        // skip if we can't find
        if (blogPost == null)
            return;

        // remove
        BlogPosts.Remove(blogPost);
        _context.BlogPosts.Remove(blogPost);
        _context.SaveChanges();
        StateHasChanged();

        // clear whatever
        PostInProgress = new();
    }

    private void RemoveComment(int commentId)
    {
        Comment? commentToDelete = _context.Comments.ToList().Where(c => c.Id == commentId).FirstOrDefault();

        // skip if we can't find
        if (commentToDelete == null)
            return;

        // remove
        _context.Comments.Remove(commentToDelete);
        _context.SaveChanges();
        StateHasChanged();
    }
}
